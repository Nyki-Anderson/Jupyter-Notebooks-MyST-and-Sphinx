{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "title: MyST Markdown Integration for Jupyter Notebooks\n",
    "description: This notebook explores the conventions for yaml frontmatter in MyST Formatted notebooks and some of the tool's other features.\n",
    "date: 2024-01-04\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "vscode": {
     "languageId": "html"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>\n",
       "    body {\n",
       "        /* change --vscode-font-family if it's different on your system */\n",
       "        --vscode-font-family: \"lmroman17-regular\"\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<style>\n",
    "    body {\n",
    "        /* change --vscode-font-family if it's different on your system */\n",
    "        --vscode-font-family: \"lmroman17-regular\"\n",
    "    }\n",
    "</style>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MyST Markdown and Jupyter Notebook\n",
    "\n",
    "[MyST-NB](https://myst-nb.readthedocs.io/en/latest/) is a Spinx and Docutils extension for compiling Jupyter Notebooks into high quality documentation formats.\n",
    "\n",
    "This extension will allow us to mix Jupyter notebooks with text-based notebooks, Markdown, and RST documents. Using MyST flavored Markdown syntax --which extends [CommonMark Markdown](https://commonmark.org/) language including admonitions and [additional syntax](https://myst-parser.readthedocs.io/en/latest/syntax/typography.html)-- we can author technical and scientific documentation through our regular Jupyter interface and render beautiful PDFs, MS Word Documents, LaTeX, and more.\n",
    "\n",
    "I am really excited by using MyST as a potential substitute for my original `Pandoc` configuration project and want to turn this Jupyter setup into it's own separate build script so that it can be used added to future Jupyter environments.\n",
    "\n",
    ":::{important} Objectives\n",
    "An important objective of this Jupyter Notebook is to understand the implementation of MyST and it's tools to generate better notebooks that can be converted to publish-quality products. \n",
    ":::\n",
    "\n",
    "# Getting Started with MyST & Sphinx\n",
    "\n",
    "\n",
    "\n",
    "# [Frontmatter](https://mystmd.org/guide/frontmatter)\n",
    "\n",
    "Frontmatter allows you to specify metadata and options about how your project should behave or render. Included in frontmatter are things like the document or project `title`, what `thumbnail` to use for sit or content previews, `authors` that contributed to the work, and scientific identifiers like a `doi`. Adding frontmatter ensures that these properties are available to downstream tools or build processes like building **Scientific PDFs**.\n",
    "\n",
    "## Where to set frontmatter\n",
    "\n",
    "Frontmatter can be set in a markdown (`md`) or notebook (`ipynb`) file (described as a \"page\" below) or in the `project:` section of a `myst.yml` file. When project frontmatter is set in a `myst.yml` file, those settings will be applied to all content in that project (apart from \"page only\" fields).\n",
    "\n",
    "### In a MyST markdown file\n",
    "\n",
    "A frontmatter section can be added at the top of any `md` file using `---` delimiters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "title: My First Article\n",
    "date: 2024-01-04\n",
    "authors:\n",
    "    - Nyki Anderson\n",
    "      affiliations:\n",
    "        - University of Europe\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### In a Jupyter Notebook\n",
    "\n",
    "Frontmatter can be added to the first cell of a Jupyter Notebook, that cell should be a Markdown cell and use `---` delimiters as above.\n",
    "\n",
    "> **Hint!** Install JupyterLab Myst\n",
    "> To have properly formatted frontmatter, you can install the `jupyterlab-myst` plugin for Jupyter.\n",
    ">\n",
    "> `pip install jupyterlab_myst`\n",
    ">\n",
    "> Without the extension installed, remember to format the contents of the section as valid `yaml` even though when rendered, the cell will not look well formatted in your notebook.\n",
    "\n",
    "### In a `myst.yml` file\n",
    "\n",
    "Frontmatter fields can be added directly to any `project:` section within a `myst.yml` file. If your root `myst.yml` file only contains a `site:` section, and you want to add frontmatter, add a `project:` section at the top level and add the fields there, e.g.,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "myst: v1\n",
    "site: \n",
    "project:\n",
    "    license: CC-BY-4.0\n",
    "    open_access: true\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Available frontmatter fields\n",
    "\n",
    "The following table lists the available frontmatter fields, a brief description and a note on how the field behaves depending on whether it is set on a page or at the project level. Where a field itself is an object with sub-fields, see the relevant description on the page below.\n",
    "\n",
    "- `title` - a string (page & project)\n",
    "- `description` - a string (page & project)\n",
    "- `short_title` - a string (page & project)\n",
    "- `name` - a string (page & project)\n",
    "- `tags` - a list of strings (page only)\n",
    "- `thumbnail` - a link to a local or remote image (page only)\n",
    "- `subtitle` - a string (page only)\n",
    "- `date` - a valid date (page can override project)\n",
    "- `authors` - a list of author objects (page can override project)\n",
    "- `affiliations` - a list of affiliation objects (page can override project)\n",
    "- `doi` - a valid DOI, either URL or id (page can override project)\n",
    "- `arxiv` - a valid arXiv reference, either URL or id (page can override project)\n",
    "- `open_access` - boolean (page can override project)\n",
    "- `license` - a license object or a string (page can override project)\n",
    "- `funding` - a funding object (page can override project)\n",
    "- `github` - a valid GitHub URL or `owner/reponame` (page can override project)\n",
    "- `binder` any valid URL (page can override project)\n",
    "- `subject` - a string (page can override project)\n",
    "- `venue` - a venue object (page can override project)\n",
    "- `biblio` - a biblio object with various fields (page can override project)\n",
    "- `math` - a dictionary of math macros (page can override project)\n",
    "- `abbreviations` - a dictionary of abbreviations in the project (page can override project)\n",
    "- `parts` - a dictionary of arbitrary content parts, not part of the main article, for example `abstract`, `data_availability` (page only)\n",
    "- `options` - a dictionary of arbitrary options validated and consumed by templates, for example, during site or PDF build (page can override project)\n",
    "\n",
    "## Field Behavior\n",
    "\n",
    "Frontmatter can be attached to a \"page\", meaning a local `.md` or `.ipynb` or a \"project\". However, individual frontmatter fields are not uniformly available at both levels, and certain behavior of certain fields are different between project and page levels. There are three field behaviors to be aware of:\n",
    "\n",
    "- `page & project` : the field is available on both th epage & project but they are independent\n",
    "- `page only` : the field is only available on pages, and not present on projects and it will be ignored if set there.\n",
    "- `page can override project` : the field is available on both page & project but the value of the field on the page will override any set of the project. Note that the page field must be omitted or undefined, for the project value to be used, value of `null` (or `[]` in the case of `authors`) will still override the project value but clear the field for that page.\n",
    "\n",
    "## Thumbnail & Banner\n",
    "\n",
    "The thumbnail is used in previews for your site in applications like Twitter, Slack, or any other link preview service. This should, by convention, be included in a `thumbnails` folder next to your content. You can also explicitly set this field to any other image on your local file system or a remote URL to an image. This image will get copied over to your public folder and optimized when you build your project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "thumbnail: thumbnails/myThumbnail.png\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you do not specify an image the first image in the content of a page will be selected. If you explicitly do not want an image, set `thumbnail` to `null`.\n",
    "\n",
    "You can also set a banner image which will show up in certain themes, for example, the `article-theme`:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "banner: banner.png\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Example of a banner in a site using the `article-theme`.](../_static/images/banner.jpg)\n",
    "\n",
    "## Authors\n",
    "\n",
    "The `authors` field is a list of `author` objects. Available fields in the author object are:\n",
    "\n",
    "- `name` : a string OR CSL-JSON author object - the author's full name; if a string, this will be parsed automatically. Otherwise, the object may contain `given`, `surname`, `non_dropping_particle`, `dropping_particle`, `suffix`, and full name `literal`.\n",
    "- `orcid` : a string - a valid ORCID identifier with or without the URL.\n",
    "- `corresponding` : boolean - flags any corresponding authors, you must include an `email` if true.\n",
    "- `url` : a string - website or homepage of the author.\n",
    "- `roles` : a list of strings - must be valid **CRediT Contributor Roles**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "authors:\n",
    "    - name: Nyki Anderson\n",
    "      roles:\n",
    "        - Conceptualization\n",
    "        - Data curation\n",
    "        - Validation\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **CRediT Roles**\n",
    ">\n",
    "> There are 14 official contributor roles that are in the NISO CRediT Role standard. In addition to British english, incorrect case or punctuation, there are also a number of aliases that can be used for various roles.\n",
    ">\n",
    "> - Conceptualization (alias: conceptualisation)\n",
    "> - Data curation\n",
    "> - Formal analysis (alias: analysis)\n",
    "> - Funding acquisition\n",
    "> - Investigation\n",
    "> - Methodology\n",
    "> - Project administration (alias: administration)\n",
    "> - Resources\n",
    "> - Software\n",
    "> - Supervision\n",
    "> - Validation\n",
    "> - Visualization (alias: visualisation)\n",
    "> - Writing - original draft (alias: writing)\n",
    "> - Writing - review & editing (alias: editing, review)\n",
    "\n",
    "- `affiliations` : a list of strings that identify or create an affiliation or a full `Affiliation` object, for example:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "authors:\n",
    "    - name: Nyki Anderson\n",
    "      affiliations:\n",
    "        - id: ubc\n",
    "          institution: University of British Columbia\n",
    "          ror: 034rmrcq20\n",
    "          department: Earth, Ocean and Atmospheric Sciences\n",
    "        - ACME Inc\n",
    "    - name: Julian Todman\n",
    "      affiliation: ubc   \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See [Affiliations](https://mystmd.org/guide/frontmatter#affiliations) for more information on how to concisely write affiliations.\n",
    "\n",
    "- `equal-contributor` : a boolean, indicates that the author is an equal contributor.\n",
    "- `deceased` : a boolean, indicates that the author is a deceased.\n",
    "- `twitter` : a twitter username.\n",
    "- `github` : a GitHub username.\n",
    "- `note` : a string, a freeform field to indicate additional information about the author, for example, acknowledgments or specific correspondence information.\n",
    "- `phone` : a phone number, e.g., (301) 754 - 5766.\n",
    "- `fax` : for people who still use these machines.\n",
    "\n",
    "## Affiliations\n",
    "\n",
    "You can create an affiliation directly by adding it to an author, and it can be as simple as a single string."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "authors:\n",
    "    - name: Nyki Anderson\n",
    "      affiliation: University of British Columbia\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also add much more information to any affiliation, such as a ROR, ISNI, or an address. A very complete affiliations list for an author at the University of British Columbia is:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "authors:\n",
    "    - name: Nyki Anderson\n",
    "      affiliations:\n",
    "        - id: ubc\n",
    "          institution: University of British Columbia\n",
    "          ror: https://ror.org/03rmrcq20\n",
    "          isni: 0000 0001 2288 9830\n",
    "          department: Department of Earth, Ocean and Atmospheric Sciences\n",
    "          address: 2020 - 2207 Main Mall\n",
    "          city: Vancouver\n",
    "          region: British Columbia\n",
    "          country: Canada\n",
    "          postal_code: V6T 1Z4\n",
    "          phone: 604 822 2449\n",
    "    - name: Julian Todman\n",
    "      affiliation: ubc   \n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice how you can use an `id` to avoid writing this out for every coauthor. Additionally, if the affiliation is a single string and contains a semi-colon `;` it will be treated as a list. The affiliations can also be added to your `project` frontmatter in your `myst.yml` and used across any document i the project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "# article.md\n",
    "title: My Article\n",
    "authors:\n",
    "  - name: Nyki Anderson\n",
    "    affiliation: ubc\n",
    "  - name: Julian Todman\n",
    "    affiliations: ubc; stanford\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "# myst.yml\n",
    "affiliations:\n",
    "  - id: ubc\n",
    "    institution: University of British Columbia\n",
    "    ror: https://ror.org/03rmrcq20\n",
    "    isni: 0000 0001 2288 9830\n",
    "    department: Department of Earth, Ocean and Atmospheric Sciences\n",
    "    address: 2020 – 2207 Main Mall\n",
    "    city: Vancouver\n",
    "    region: British Columbia\n",
    "    country: Canada\n",
    "    postal_code: V6T 1Z4\n",
    "    phone: 604 822 2449\n",
    "  - id: stanford\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you use a string that is not recognized as an already defined affiliation in the project or article frontmatter, an affiliation will be created automatically and normalized so that it can be referenced:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "# Written Frontmatter\n",
    "authors:\n",
    "  - name: Marissa Myst\n",
    "    affiliations:\n",
    "      - id: ubc\n",
    "        institution: University of British Columbia\n",
    "        ror: 03rmrcq20\n",
    "        department: Earth, Ocean and Atmospheric Sciences\n",
    "      - ACME Inc\n",
    "  - name: Miles Mysterson\n",
    "    affiliation: ubc\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "# Normalized\n",
    "authors:\n",
    "  - name: Marissa Myst\n",
    "    affiliations: ['ubc', 'ACME Inc']\n",
    "  - name: Miles Mysterson\n",
    "    affiliations: ['ubc']\n",
    "affiliations:\n",
    "  - id: ubc\n",
    "    institution: University of British Columbia\n",
    "    ror: https://ror.org/03rmrcq20\n",
    "    department: Earth, Ocean and Atmospheric Sciences\n",
    "  - id: ACME Inc\n",
    "    name: ACME Inc\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `id` : a string - local identifier that can be used to easily reference a repeated affiliation.\n",
    "- `name` : a string - the affiliation name. Either `name` or `institution` is required.\n",
    "- `institution` : a string - Name of an institution or organization (for example, a university or corporation). If your research group has a name, you can use both `name` and `institution`, however, at least one of these is required.\n",
    "- `department` : a string - the affiliation department (e.g., Chemistry).\n",
    "- `doi, ror, isni, ringgold` : identifiers for the affiliation (DOI, ROR, ISNI, and Ringgold). We suggest using https://ror.org if possible to search for your institution."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "affiliations:\n",
    "  - name: Boston University\n",
    "    ringgold: 1846\n",
    "    isni: 0000 0004 1936 7558\n",
    "    ror: 05qwgg493\n",
    "    doi: 10.13039/100018578\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `email` : a string - email of the affiliation, required if `corresponding` is `true`.\n",
    "- `address, address`, `city`, `state`, `postal code`, and `country` : affiliation address information, in place of `state` you can use `province` or `region`.\n",
    "- `url` : a string - website or homepage of the affiliation (`website` is an alias).\n",
    "- `phone` : a phone number, e.g., (301) 754 5766.\n",
    "- `fax` : A fax number for the affiliation.\n",
    "- `collaboration` : a boolean - indicate that the affiliation is a collaboration, for example, \"MyST Contributors\" can be both an affiliation and a listed author. This is used in certain templates as well as in **JATS**.\n",
    "\n",
    "## Date\n",
    "\n",
    "The date field is a string and should conform to a valid Javascript data format. Examples of acceptable date formats are:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "2021-12-14T10:43:51.777Z - an ISO 8601 calendar date extended format, or\n",
    "14 Dec 2021\n",
    "14 December 2021\n",
    "2021, December 14\n",
    "2021 December 14\n",
    "12/14/2021 - MM/DD/YYYY\n",
    "12-14-2021 - MM-DD-YYYY\n",
    "2022/12/14 - YYYY/MM/DD\n",
    "2022-12-14 - YYYY-MM-DD\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Where the latter example in that list are valid **IETF-timestamps**.\n",
    "\n",
    "## Licenses\n",
    "\n",
    "This field can be set to a string value directly or to a License object.\n",
    "\n",
    "Available fields in the License object are `content` and `code` allowing licenses to be set separately for these two forms of content, as often different subsets of licenses are applicable to each. If you only wish to apply a single license to your page or project use the string form rather than an object.\n",
    "\n",
    "String values for licenses should be a valid \"Identifier\" string from the [SPDX License List](https://spdx.org/licenses/). Identifiers for well-known licenses are easily recognizable (e.g., `MIT` or `BSD`) and MyST will attempt to infer the specific identifier if an ambiguous license is specified (e.g., `GPL` will be interpreted as `GPL-3.0+` and a warning raised letting you know of this interpretation). Some common licenses are:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "# Common Content Licenses\n",
    "CC-BY-4.0\n",
    "CC-BY-SA-4.0\n",
    "CC-BY-N-SA-4.0\n",
    "CC0-1.0\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "# Common Code Licenses\n",
    "MIT\n",
    "BSD\n",
    "GPL-3.0+\n",
    "Apache-2.0\n",
    "LGPL-3.0-or-later\n",
    "AGPL\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By using the correct SPDX Identifier, your website will automatically use the appropriate icon for the license and link to the license definition.\n",
    "\n",
    "## Funding\n",
    "\n",
    "Funding frontmatter is able to contain multiple funding and open access statements, as well as award info.\n",
    "\n",
    "It may be as simple as a single funding statement:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "funding: This work was supported by University.\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funding may also specify award id, name, sources (`affiliation object` or `reference`), investigators (`contributor objects` or `references`), and recipients (`contributor objects` or `references`)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "authors:\n",
    "  - id: auth0\n",
    "    name: Jane Doe\n",
    "funding:\n",
    "  statement: This work was supported by University.\n",
    "  id: award-id-000\n",
    "  name: My Award\n",
    "  sources:\n",
    "    - name: University\n",
    "  investigators:\n",
    "    - name: John Doe\n",
    "  recipients:\n",
    "    - auth0\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Multiple funding objects with multiple awards are also possible:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "authors:\n",
    "  - id: auth0\n",
    "    name: Jane Doe\n",
    "funding:\n",
    "  - statement: This work was supported by University.\n",
    "    awards:\n",
    "      - id: award-id-000\n",
    "        name: My First Award\n",
    "        sources:\n",
    "          - name: University\n",
    "        investigators:\n",
    "          - name: John Doe\n",
    "        recipients:\n",
    "          - auth0\n",
    "      - id: award-id-001\n",
    "        name: My Second Award\n",
    "        sources:\n",
    "          - name: University\n",
    "        investigators:\n",
    "          - name: John Doe\n",
    "        recipients:\n",
    "          - auth0\n",
    "  - statement: Open access was supported by Consortium.\n",
    "    open_access: Users are allowed to reproduce without prior permission\n",
    "    awards:\n",
    "      - id: open-award-999\n",
    "        sources:\n",
    "          - name: Consortium\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Venue\n",
    "\n",
    "The term `venue` is borrowed from the **OpenAlex** API definition: \n",
    "\n",
    "**Venues are where works are hosted**.\n",
    "\n",
    "Available fields in the `venue` object are `title` and `url`.\n",
    "\n",
    "Some typical `venue` values may be:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "venue:\n",
    "  title: Journal of Geophysics\n",
    "  url: https://journal.geophysicsjournal.com\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "venue:\n",
    "  title: EuroSciPy 2022\n",
    "  url: https://www.euroscipy.org/2022\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Biblio\n",
    "\n",
    "The term `biblio` is borrowed from the **OpenAlex** API definition:\n",
    "\n",
    "**Old-timey bibliographic info for this work. This is mostly useful only in citation/reference contexts. These are all strings because sometimes you'll get fun values like \"Spring\" and \"Inside cover.\"**\n",
    "\n",
    "Available fields in the `biblio` object are `volumne`, `issue`, `first_page` and `last_page`.\n",
    "\n",
    "Some example `biblio` values may be:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "biblio:\n",
    "  volume: '42'\n",
    "  issue: '3'\n",
    "  first_page: '1' # can be a number or string\n",
    "  last_page: '99' # can be a number or string\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```yaml\n",
    "biblio:\n",
    "  volume: '2022'\n",
    "  issue: Winter\n",
    "  first_page: Inside cover # can be a number or string\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# [Settings](https://mystmd.org/guide/settings)\n",
    "\n",
    "The `settings` field in the project or page frontmatter allows you to change how the parsing, transforms, plugins, or other behaviors of mystmd.\n",
    "\n",
    "## Available settings fields\n",
    "\n",
    "- `output_stderr` : Remove, warn, or error on `stderr` outputs (e.g., `DeprecationWarnings`, `RuntimeWarnings`).\n",
    "  \n",
    "  - `show` : (default) : show all `stderr` (unless a `remove-stderr` tag is present on  the cell).\n",
    "  - `remove` : remove all `stderr` outputs.\n",
    "  - `remove-warn` or `remove-error` : remove all `stderr`, and log a warning or error.\n",
    "  - `warn` or \"error\" : log a warning or error if a `stderr` is found.\n",
    "\n",
    "- `output_stdout` : Remove, warn or error on `stdout` outputs. (e.g., long text outputs, like text-based progress bars).\n",
    "  - `show` : (default) : show all `stdout` (unless a `remove-stdout` tag is present on the cell).\n",
    "  - `remove-warn` or `remove-error` : remove all `stdout`, and log a warning or error.\n",
    "  - `warn` or \"error\" : log a warning or error if a `stdout` is found.\n",
    "\n",
    "- `output_matplotlib_strings` : Remove, warn, or error on matplotlib strings outputs. (e.g., <Figure size 720x576 with 1 Axes> or Text(0.5, 0.98, 'Test 1')). These can also be suppressed by ending your cell content with a semicolon in Jupyter Notebooks. The default is to remove these and warn (`remove-warn`).\n",
    "  - `show` : show al matplotlib strings in outputs.\n",
    "  - `remove` : remove all matplotlib strings in outputs\n",
    "  - `remove-warn` : (default) or `remove-error` : remove all matplotlib strings in outputs, and log a warning or error.\n",
    "  - `warn` or \"error\" : log a warning or error if matplotlib strings in outputs.\n",
    "\n",
    "# More From MyST Markdown\n",
    "\n",
    "Most of this Notebook has been focused on the use of frontmatter to enrich the quality and dynamism of our projects. But from skimming through the extensive documentation, it is clear that MyST Markdown Tools might have more value than just allowing richer metadata in Jupyter Notebooks. \n",
    "\n",
    "According to the [MyST Markdown homepage](https://mystmd.org/guide), their tools are designed to revolutionize scientific communication in its various forms. Labeling itself an \"authoring framework,\" MyST products handle blogs, online books, scientific papers, reports, and journal articles. \n",
    "\n",
    "## Key Features\n",
    "\n",
    "- **Rabbit-hole links** allow you to get information to your reader as fast as possible and they can deep-dive all the way to computations, code, and interactive figures.\n",
    "- **Live graphs** can be embedded directly in your documentation or articles with computation backed by Jupyter --running locally, on Binder, or directly in your browser.\n",
    "- **JupyterLab support** for MyST comes with inline computations, support for `ipywidgets`, matplotlib sparklines, editable task-lists, rich frontmatter (as we know already), and beautiful typography and other elements like dropdowns, grids and cards.\n",
    "- **Export to PDF** is easy and they support hundreds of different journals out of the box, see [myst-templates](https://github.com/myst-templates). You can also export to Microsoft Word or JATS, which is used in scientific publishing.\n",
    "\n",
    "## Project Goals\n",
    "\n",
    "MyST is part of the [Executable Books](https://executablebooks.org/) organization, which is a community driven project to improve scientific communication, including integrations into Jupyter Notebooks and computational results.\n",
    "\n",
    "### Built for Science\n",
    "\n",
    "Extend Markdown with equations, cross-references, citations, and export to preprint or rich, interactive website or book.\n",
    "\n",
    "### Dynamic Documents \n",
    "\n",
    "Make your pages interactive by connecting to custom JupyterHubs, public Binders, or even Python directly in your browser.\n",
    "\n",
    "### Fast & Accessible\n",
    "\n",
    "Publish next-generation articles and books that are beautifully designed, without compromising on accessibility or performance.\n",
    "\n",
    "### Technical Goals\n",
    "\n",
    "- `mystmd` is a Javascript parser and command line tool for working with MyST Markdown.\n",
    "- Parse MyST into a standardized **AST**, that follows the MyST Spec.\n",
    "- Translate and render MyST into:\n",
    "    - Modern **interactive websites**, using React.\n",
    "    - PDFs and LaTeX documents, with specific templates for over 400 journals.\n",
    "    - Microsoft Word **export**.\n",
    "\n",
    "- Provide functionality for *cross-referencing*, *external structured links*, and *scientific citations*.\n",
    " \n",
    "## Installing the MyST Markdown CLI\n",
    "\n",
    "`mystmd` is a command line interface that provides modern tooling for technical writing, reproducible science, and creating scientific & technical websites. To get started, install `mystmd`.\n",
    "\n",
    "### Prerequisites - Install Node\n",
    "\n",
    "You should have these programs installed already from our last Notebook:\n",
    "\n",
    "- `Node.js` version >=18.0.0\n",
    "- `npm` version >=7.0.0\n",
    "- A code and notebook editor (`VS Code` and `Jupyter Lab` for notebooks).\n",
    "\n",
    "### Install the MyST CLI\n",
    "\n",
    "Install node https://nodejs.org/ or through conda."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "zsh:1: 20, not found\n",
      "\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "conda install -c conda-forge 'nodejs>=20,<21'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then install `mystmd`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "vscode": {
     "languageId": "shellscript"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Channels:\n",
      " - conda-forge\n",
      " - defaults\n",
      "Platform: osx-arm64\n",
      "Collecting package metadata (repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "# All requested packages already installed.\n",
      "\n",
      "\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "conda install mystmd -c conda-forge"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Circle Back at a Later Date\n",
    "\n",
    "All of the promising features of MyST have certainly piqued my interests though much of the functionality is beyond the scope of the current state of my many projects. I will certainly be returning to this documentation when I begin publishing my Ancestry Research findings and as academic or professional opportunities come my way. \n",
    "\n",
    "For now, we will focus our attention on producing thorough metadata through page-level directives and potentially project level-directives as we become more comfortable with the Jupyter Notebook system as a whole. \n",
    "\n",
    "Let's run back through this and the previous Notebook to input some quick metadata and move on to the next topic."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "jupyter-lua",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

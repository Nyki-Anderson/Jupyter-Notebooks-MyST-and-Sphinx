{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Goal: A Publishing Environment for Static HTML & LaTeX PDF\n",
    "\n",
    "The purpose of this project is to streamline the publishing process for professional-quality scientific reports, books, and documentation. For these purposes, we will be using [Jupyter Notebook](https://jupyter.org/), [MyST Markdown](https://myst-parser.readthedocs.io/en/latest/), and [Sphinx Documentation](https://www.sphinx-doc.org/en/master/). These tools will serve as the backbone to our metadata-rich content, bringing depth and accessibility to the final products (a static HTML site and accompanying PDF book).\n",
    "\n",
    "Whether you are just hearing of these tools or are looking to sharpen some skills, this tutorial will do its best to thoroughly improve your scientific deliverables. \n",
    "\n",
    "Let's get a sense of scope before we drill in. \n",
    "\n",
    "```{admonition} Objectives\n",
    "There are many facets to this project, in this chapter, we will only concern ourselves with the big picture. Our main objectives by the end of this project will be to:\n",
    "\n",
    "- Publish Jupyter Notebooks using MyST Markdown and Sphinx Documentation as tools.\n",
    "- Build a reproducible python environment that is fully configured with metadata and extensive documentation.\n",
    "- Implement custom design elements such as admonitions, support for emojis, widgets, and interactive content.\n",
    "- Streamline the pipeline to as few commands as possible for continuous deployment.\n",
    "```\n",
    "\n",
    "## The Results\n",
    "\n",
    "By the conclusion of this tutorial you will be able to build and replicate an environment capable of publishing beautiful static websites and professional PDFLaTeX-rendered documents. Dozens of built-in HTML themes and granular control over the LaTeX formatting make for an endless sandbox of options but the stock design tools produce elegant results by themselves.\n",
    "\n",
    "### Gallery\n",
    "\n",
    "Check out the gallery below to see how the previous version of this tutorial rendered.\n",
    "\n",
    "```{figure} ../_static/images/00-html-preview-1.jpg \n",
    ":alt: HTML Preview 1\n",
    ":scale: 25 %\n",
    "\n",
    "*HTML renders like no other with adaptive UI built-in and preset themes to round out the breathability of the content.*\n",
    "```\n",
    "\n",
    "```{figure} ../_static/images/00-html-preview-2.jpg\n",
    ":alt: HTML Preview 2\n",
    ":scale: 25 %\n",
    "\n",
    "*Sphinx even implements customizable syntax-highlighting thanks to its integration with Pygment themes.*\n",
    "```\n",
    "\n",
    "```{figure} ../_static/images/00-pdf-preview-1.jpg\n",
    ":alt: PDF Preview 2\n",
    ":scale: 25 %\n",
    "\n",
    "*There's so much more to word-processing than font size and alignment. Sphinx and LaTeX work wonders together.*\n",
    "```\n",
    "\n",
    "```{figure} ../_static/images/00-pdf-preview-2.jpg\n",
    ":alt: PDF Preview 2\n",
    ":scale: 25 %\n",
    "\n",
    "*The look and feel is organized with carefully auto-numbered sections and deliberate line breaking.*\n",
    "```\n",
    "\n",
    "### Contents of Build\n",
    "\n",
    "```{figure} ../_static/images/00-final-dir.jpg\n",
    ":alt: Final directory structure.\n",
    ":scale: 25 %\n",
    "\n",
    "*The final directory structure will look something like this when we've finished. More details on the exactly what each folder contains later.*\n",
    "```\n",
    "\n",
    "#### Folder Contents\n",
    "\n",
    "The basic structure of the final build directory is as follows:\n",
    "\n",
    "- `docs` : This is the content folder and contains several other folders that make up the content that is to be converted and the content that is delivered.\n",
    "  - `build` : Inside this folder is where you will find either the LaTeX output or the HTML scripts. \n",
    "  - `source` : Probably th most important folder, this is where content is kept and configuration `.yml`s housed. \n",
    "    - `_notebooks` : You may have guessed it but this is our content folder. Any `.md`, `.rst`, or `.pynb` files that need to be rendered by Sphinx should be kept in here.\n",
    "    - `_static` : Static assets like images and `.js` are stored here for easy reference by the content.\n",
    "    - `_templates` : Any template files should be kept in this folder, though we don't make use of any throughout this tutorial.\n",
    "    - `_config` : This file could be replaced with a `myst.yml` as they contain the same key:value pairs but I have yet to decide how I want to handle this.\n",
    "    - `conf.py` : The most important configuration file, it contains all the directives for Sphinx and its integrations with the other apps. All extensions, file inclusions/exclusions, formatting, etc. are defined within.\n",
    "    - `index.rst` : This is the **main** configuration file as it determines what is captured by the rendering process in a structure called the `toctree`. \n",
    "  - `Makefile` and `make.bat` :\n",
    "- `lib` : This contains any dependencies and packages that are needed for the environment including an `environment.yml` file with all the packages installed by the virtual `conda` environment that controls the whole build.\n",
    "- `node_modules` : Contains the build packages for `node.js` though we don't make use of them in this tutorial.\n",
    "- `scripts` : Two `bash` scripts are necessary to bring everything together with one command. (More on these soon.)\n",
    "- `share` : This is where we store the files that derive any custom kernels we build or install.\n",
    "- `src` : The interpreters for the kernels are kept here.\n",
    "- `package.json` and `package-lock.json` : These two files maintain the versions of all node packages and describe the project.\n",
    "\n",
    "## The Road Ahead\n",
    "\n",
    "This is a pretty massive undertaking when I think about the path that has led me to this point in the project. This project started out as research for another project that involved [lua](https://www.lua.org/docs.html) programming language and [Pandoc](https://pandoc.org/MANUAL.html) exporting. Through much trial and error, I can say that I prefer this solution though it does not directly apply to the application I had before which was to export my [Obsidian vault](https://help.obsidian.md/Home) files to PDF elegantly (though it seems within the realm of possibility).\n",
    "\n",
    "Still, it has been massively rewarding to go through this process and I hope by sharing it with you, it can make an impact on your productivity too. Here's a look ahead.\n",
    "\n",
    "### The Environment: A Local `conda` Installation \n",
    "\n",
    "We will utilize [Anaconda](https://www.anaconda.com/download) or [Miniconda](https://docs.conda.io/projects/miniconda/en/latest/) package manager [conda](https://docs.conda.io/projects/conda/en/stable/) for the majority of our environment build. We will of course automate the installation of packages though I will mention a few significant ones more critically. Automation will come in the form of very minimal bash scripting --though I must mention it was much more involved when I was building the [xeus-lua kernel](https://xeus-lua.readthedocs.io/en/latest/) from source. \n",
    "\n",
    "As new packages are found necessary, the running version control file, [lib/environment.yml](../../../lib/environment.yml) will need to be updated accordingly. Keeping this running \"log\" of what is being installed is what makes this project so valuable in the long run because you are going to want a portable installation that can adapt to whatever your next publication need is. \n",
    "\n",
    "### The Configuration: Integrating Three Tools into One\n",
    "\n",
    "This will, by far, be the most time consuming section to cover, as it took me days to come to the correct solution for integrating all three tools. There is extensive documentation --as you might guess-- for all three of these programs but there are significant holes in communication as far as where configuration directives can legally be called and exactly where to put the files when you figure it out. \n",
    "\n",
    "Folding in all three tools was a challenge, made all the harder by the fact that I opted to keep the installations local rather than use something like JupyterLab which actually has MyST Markdown preview capabilities. I stuck with that decision because I wanted to be able to control exactly how much unfinished content was \"out there\" on a server. I imagine using these tools to publish and finalize rather proprietary information at some point and I wanted to know how to do it in house before considering security implications. \n",
    "\n",
    "```{admonition} Staying Local\n",
    "Staying local also meant I got to keep using VS Code which runs Jupyter Notebook natively and does the best job out of any IDE I've ever used at maintaining a cohesive workspace. Not to mention the ability to use the command line right within the application itself. And while most of the VS Code extensions cannot reach the Jupyter kernel directly, most of the perks of the Jupyter Notebook UI are available through the command prompt.\n",
    "```\n",
    "\n",
    "As far as the configuration files go themselves, they are written in `.yml` mostly with a few exceptions. The Sphinx configuration file is a python script called [conf.py](../conf.py), the [index.rst](../index.rst) is written in reStructureText (a derivative of Markdown), and there are a couple versions of a [Makefile](../../Makefile) --or[make.bat](../../make.bat)-- to bring it all together. Details are best left to that respective chapter.\n",
    "\n",
    "### The Deployment: Publishing Our Work in its Finest Format\n",
    "\n",
    "This was probably the most frustrating part of the whole process because it was dependent on a lot of tools and techniques that I've never used before. The greatest difficulty came in the form of learning [GitHub Actions and Workflows](https://github.com/features/actions) --or rather, not learning-- how to deploy to GitHub Pages in that way. I also experimented with [Read the Docs](https://docs.readthedocs.io/en/stable/) deployment which is still tied to a GitHub repository but carries its own documentation and workflows. I found this method much less transparent than the pure GitHub method and eventually found the simplest tutorial ever. In this chapter, we will explore the various methods and how they are supposed to work. \n",
    "\n",
    "There is also some value in refining the `PDFLatex` workflow so that it is more customized to the document itself rather than full of assumptions and errors. I find that this method of publishing is more in the wind than the HTML export and that's because LaTeX is programmatically structured rather without the benefits of the linear progression and infinite scroll of a website. Still, the approach as it stands currently has quite the payoff and is something I am excited to share. \n",
    "\n",
    "## Project Expansion\n",
    "\n",
    "This project could see a lot more content as an addendum in the future. I see many ways to improve the pipeline and certainly more ways to get value out of the capabilities of all three tools. Jupyter Notebooks intrigues me as a likely replacement --or at least equally tempting option-- for use as my go to note-taking app. I love Obsidian more than most people love their children and have made tremendous growth in terms of Plugin integration and authorship but it doesn't seem to be as refined or elegant as Jupyter.\n",
    "\n",
    "Further, as I start to embark on legitimate research that I might wish to share with the world, I can tell that Sphinx will be a long time friend. I do enjoy making tutorials about the things I learn so publishing in this format will certainly be a step up from the dreaded GitHub `docs` repositories I've come accustomed to submitting. \n",
    "\n",
    "This project could evolve even before it is done being written as there were many loose ends that I just had to move away from because they were too far outside the scope of the immediate project. But I would potentially like to address them within the same tutorial as addenda. These topics include:\n",
    "\n",
    "- Developing a custom Jupyter kernel with the capability of running both `xeus-lua` and `shell` commands or at least the potential to make use of `IPython` magic commands.\n",
    "- Building a full-service GitHub repo that can be installed using a simple `Makefile` or `bash` script. The project is close on delivering this kind of universality but I am not quite sure how much further I would need to take it, so more research is required.\n",
    "- Integrating a more flexible `node.js` kernel capable of running insecure web applications from within the Jupyter Notebook with a tool like OWASP-ZAP for performing penetration testing. I found a couple of tutorials on this topic and it is certainly on my radar as a possible alternative to using Docker for the same purposes.\n",
    "- Cleaning up the repository and environment install so that it is leaner and faster.\n",
    "- Implement custom admonitions with graphic much like the native-MyST Markdown flavored admonitions.\n",
    "\n",
    "## Closing Remarks\n",
    "\n",
    "It is still uncertain how many, if any of these topics I will be able to cover in this tutorial before another project takes precedent. But if any of these sound more useful than others, do not hesitate to reach out in the comments of [this repo](https://github.com/Nyki-Anderson/Jupyter-Notebooks-MyST-and-Sphinx.git).\n",
    "\n",
    "Now, let's get our hands on some code!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "jupyter",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
